'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { auth, db } from '@/lib/firebase';
import { collection, addDoc, onSnapshot, query, where, orderBy } from 'firebase/firestore';
import { signOut } from 'firebase/auth';
import Link from 'next/link';
import ChatMessages from '@/components/chat/ChatMessages';
import ChatInput from '@/components/chat/ChatInput';
import { ChatMessage } from '@/types/chat';
import axios from 'axios';

export default function Home() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const user = auth.currentUser;
  const router = useRouter();

  useEffect(() => {
    if (user) {
      const q = query(
        collection(db, 'chats'),
        where('uid', '==', user.uid),
        orderBy('timestamp', 'asc')
      );

      const unsubscribe = onSnapshot(q, (snapshot) => {
        const fetchedMessages: ChatMessage[] = [];
        snapshot.forEach((doc) => {
          fetchedMessages.push({ id: doc.id, ...doc.data() } as ChatMessage);
        });
        setMessages(fetchedMessages);
      }, (err) => {
        setError('Failed to load chat history: ' + err.message);
      });

      return () => unsubscribe();
    }
  }, [user, router]);

  const handleSendMessage = async (content: string, model: string, apiKey?: string) => {
    if (!user) return;

    setIsLoading(true);
    setError('');

    const userMessage: Omit<ChatMessage, 'id'> = {
      role: 'user',
      content,
      timestamp: new Date().toISOString(),
      uid: user.uid,
    };

    try {
      // Add user message to Firestore (ID is auto-generated by Firestore)
      await addDoc(collection(db, 'chats'), userMessage);

      // Send message to OpenRouter via API route
      const response = await axios.post('/api/chat', {
        model,
        messages: [{ role: 'user', content }],
        apiKey,
      });

      const assistantMessage: Omit<ChatMessage, 'id'> = {
        role: 'assistant',
        content: response.data.content,
        timestamp: new Date().toISOString(),
        uid: user.uid,
      };

      // Add assistant message to Firestore
      await addDoc(collection(db, 'chats'), assistantMessage);
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      if (errorMessage.includes('401')) {
        setError('Invalid API key. Please check your OpenRouter API key and try again.');
      } else if (errorMessage.includes('400')) {
        setError('Invalid request. Please ensure a model and message are provided.');
      } else {
        setError('Error sending message: ' + errorMessage);
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-4 bg-gray-100">
      <header className="w-full max-w-2xl mb-4">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">AI Chat Cloneathon</h1>
          {user ? (
            <button
              onClick={() => signOut(auth)}
              className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
            >
              Sign Out
            </button>
          ) : (
            <div className="flex gap-2">
              <Link href="/login" className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                Sign In
              </Link>
              <Link href="/signup" className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                Sign Up
              </Link>
            </div>
          )}
        </div>
      </header>
      {user && (
        <section className="w-full max-w-2xl bg-white rounded-lg shadow flex flex-col h-[80vh]">
          {error && <p className="p-4 text-red-500">{error}</p>}
          {isLoading && <p className="p-4 text-gray-500">Sending message...</p>}
          <ChatMessages messages={messages} />
          <ChatInput onSendMessage={handleSendMessage} isLoading={isLoading} />
        </section>
      )}
    </main>
  );
}